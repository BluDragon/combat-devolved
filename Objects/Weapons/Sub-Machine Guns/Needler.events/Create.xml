<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    xoffset = -11;
    yoffset = -5;
    xoffsetDW = 10;     // these values are added to the original X and Y offsets to get
    yoffsetDW = -1;     // the left hand offset
    refireTime = 3.5;
    xbarrel = 29;
    ybarrel = 9;
    event_inherited();
    
    weaponType = WEAPON_NEEDLER;
    
    // ammo counters (maximum, magazines, etc)
    maxAmmo = global.weaponMaxAmmo[weaponType];  // how much ammo you can have loaded in
    maxReserve = global.weaponMaxReserve[weaponType];   // how much ammo you can have in reserve
    ammoCount = maxAmmo;  // how much ammo you currently have loaded in
    reserveAmmo = maxAmmo * 2;    // how much ammo you currently have in reserve
    
    // range in pixels
    maxRange = 430;
    
    // damage per needle
    damage = 4;
    shieldDamage = damage;
    
    // reload stuff
    reloadTime = 38;
    
    // sprites for the various states and layers
    normalSprite = NeedlerBaseS;
    grenadeSprite = NeedlerBaseGrenadeS;
    recoilSprite = NeedlerFireS;
    reloadSprite = NeedlerReloadS;
    bodySprite = NeedlerBodyS;
    meleeSprite = NeedlerMeleeS;
    dualSprite = NeedlerBaseDWS;
    dualRecoilSprite = NeedlerFireDWS;
    equipOnBack = false;
    
    // reticle
    reticleSprite = NeedlerReticleS;
    
    // sound stuff
    equipSound = global.NeedlerEquipSnd;
    reloadSound = global.NeedlerReloadSnd;
    ammoPickupSound = global.NeedlerAmmoSnd;
    
    // recoil stuff
    // since we now play recoil anims at 1:1 frame-wise, we don't need to calculate speed,
    // just need to know how many frames there are
    recoilAnimLength = sprite_get_number(recoilSprite) / 16;
    reloadAnimLength = sprite_get_number(reloadSprite) / 16;
    meleeAnimLength = sprite_get_number(meleeSprite) / 16;
    dualRecoilAnimLength = sprite_get_number(dualRecoilSprite) / 32;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
