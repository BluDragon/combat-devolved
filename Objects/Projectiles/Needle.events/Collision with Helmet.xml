<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="COLLISION" with="Helmet">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    // if we're stuck to something already, exit
    if (stickied) exit;
    
    // if the needle is picky and the other person is not on the same team, or it's no longer picky
    if (picky &amp;&amp; !onSameTeam(ownerPlayer, other.ownerPlayer)) || !picky {
        // we're now stuck
        stickied = true;
        stickyID = other.id;
        speed = 0;
        depth = -2; // draw under weapons, over helmets
        
        // remove the mask
        if (mask != -1) {
            with (mask) instance_destroy();
        }
        mask = -1;
        
        // forget the normal lifetime expiration
        alarm[0] = -1;
        
        // figure out where we got stuck relative to the victim's origin
        // Whoa forget precision.  The head is pretty tiny, so get stuck to a random spot on it
        stickyX = random_range(-2, 7);
        stickyY = random_range(-8, 2);
        // figure out what angle we got stuck at on the victim (if they were facing right)
        stickyAngle = direction * sign(other.image_xscale) - other.image_angle;
        stickyFlip = other.image_xscale;
        stickyType = Helmet;
        
        // deal some damage to the newly-stuck victim
        weaponDealDamage(other.id, shieldDamage, damage, damageBleeds, false, false, ownerPlayer, weaponType);
        // add ourselves to the victim's list of needles
        ds_list_add(other.owner.stuckNeedles, id);
        // and if this is the host running the code, set the detonation timer
        if (global.isHost) {
            alarm[1] = 60;  // timer to detonation
        }
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
