<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="10">
  <actions>
    <action id="605" library="1">
      <!--action name: Comment-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>NONE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">define directional particles</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    /******** DEFINE PARTICLES ********/
    
    var pType;
    
    // Spike Grenade flare
    pType = part_type_create();
    spikeGFlarePT = pType;
    registerTempParticle(pType, 3, 3, 10);
    part_type_sprite(pType, SpikeGFlareS, false, false, false);
    part_type_scale(pType, 0.8, 0.6);
    part_type_size(pType, 0.4, 0.6, 0.2, 0);
    part_type_blend(pType, true);
    part_type_orientation(pType, image_angle, image_angle, 0, 0, false);
    
    // Spike Grenade line
    pType = part_type_create();
    spikeGLinePT = pType;
    registerTempParticle(pType, 3, 4, 10);
    part_type_sprite(pType, SpikeGLineS, false, false, false);
    part_type_scale(pType, 0.4, 0.3);
    part_type_size(pType, 1, 1.5, 0, 0);
    part_type_alpha3(pType, 1, 1, 0);
    part_type_blend(pType, true);
    part_type_orientation(pType, 0, 0, 0, 0, true);
    part_type_speed(pType, 4, 6, 0, 0);
    part_type_direction(pType, image_angle - 20, image_angle + 20, 0, 0);
    
    // Spike Grenade fireball
    pType = part_type_create();
    spikeGFirePT = pType;
    registerTempParticle(pType, 6, 9, 10);
    part_type_sprite(pType, FlamePartS, true, false, true);
    part_type_scale(pType, 0.5, 0.2);
    part_type_size(pType, 1, 1, -0.01, 0.5);
    part_type_alpha3(pType, 1, 0.7, 0);
    part_type_blend(pType, true);
    part_type_direction(pType, image_angle - 15, image_angle + 15, 0, 0);
    part_type_orientation(pType, 0, 0, 0, 0, true);
    part_type_speed(pType, 2, 3.5, 0, 0);
    
    // Spike Grenade smoke
    pType = part_type_create();
    spikeGSmokePT = pType;
    registerTempParticle(pType, 11, 15, 10);
    part_type_sprite(pType, BruteBlastSmokeS, true, false, true);
    part_type_scale(pType, 0.7, 0.4);
    part_type_alpha3(pType, 1, 0.7, 0.2);
    part_type_color1(pType, make_color_rgb(192, 192, 192));
    part_type_orientation(pType, 0, 0, 0, 0, true);
    part_type_direction(pType, image_angle - 15, image_angle + 15, 0, 0);
    part_type_speed(pType, 2, 3.5, -0.07, 0);
    
    /******** DEFINE EMITTERS ********/
    
    // create the smoke emitter, but don't start it
    smokeEm = part_emitter_create(global.weaponPSLo);
    part_emitter_region(global.weaponPSLo, smokeEm, x - 2, x + 2, y - 2, y + 2, ps_shape_ellipse, ps_distr_gaussian);
    
    fireEm = part_emitter_create(global.weaponPS);
    part_emitter_region(global.weaponPS, fireEm, x - 1, x + 1, y - 1, y + 1, ps_shape_ellipse, ps_distr_gaussian);
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
